# Generated by Django 5.1.2 on 2024-11-05 07:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(blank=True, choices=[('male', 'male'), ('female', 'female'), ('other', 'other')], max_length=6, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('age', models.IntegerField(default=0)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goal', models.CharField(blank=True, choices=[('Maintain', 'Maintain'), ('Loss', 'Loss'), ('Gain', 'Gain')], max_length=50, null=True)),
                ('target_weight', models.FloatField(blank=True, null=True)),
                ('activity_level', models.CharField(blank=True, choices=[('Sedentary', 'Sedentary'), ('Lightly active', 'Lightly active'), ('Moderately active', 'Moderately active'), ('Very active', 'Very active'), ('Extra active', 'Extra active')], max_length=50, null=True)),
                ('exercise_frequency', models.IntegerField(blank=True, null=True)),
                ('exercise_type', models.CharField(blank=True, choices=[('cardio', 'Cardio'), ('weightlifting', 'Weightlifting'), ('sports', 'Sports'), ('other', 'Other')], max_length=50, null=True)),
                ('exercise_duration', models.IntegerField(blank=True, null=True)),
                ('rmr', models.FloatField(blank=True, null=True)),
                ('bmi', models.FloatField(blank=True, null=True)),
                ('average_sleep_time', models.DurationField(blank=True, null=True)),
                ('sleep_quality_rating', models.IntegerField(blank=True, null=True)),
                ('sleep_issues', models.CharField(blank=True, choices=[('Insomnia', 'Insomnia'), ('Nightmares', 'Nightmares'), ('Stress or Anxiety', 'Stress or Anxiety'), ('Discomfort', 'Discomfort'), ('Irregular Sleep Schedule', 'Irregular Sleep Schedule')], max_length=50, null=True)),
                ('average_water_intake', models.IntegerField(blank=True, null=True)),
                ('stress_level', models.IntegerField(blank=True, null=True)),
                ('mood_frequency', models.IntegerField(blank=True, null=True)),
                ('mood_improvement_goal', models.CharField(blank=True, choices=[('Mindfulness', 'Mindfulness'), ('More Physical Activity', 'More Physical Activity'), ('Gratitude Journal', 'Gratitude Journal'), ('Connect with Others', 'Connect with Others'), ('Establish a Sleep Routine', 'Establish a Sleep Routine')], max_length=50, null=True)),
                ('smokes', models.BooleanField(default=False)),
                ('alcohol_consumption', models.CharField(blank=True, choices=[('None', 'None'), ('Occasional', 'Occasional'), ('Moderate', 'Moderate'), ('Frequent', 'Frequent'), ('Heavy', 'Heavy')], max_length=50, null=True)),
                ('mindfulness_practices', models.BooleanField(default=False)),
                ('screen_time', models.IntegerField(blank=True, null=True)),
                ('main_wellness_goal', models.CharField(blank=True, choices=[('Physical Health', 'Physical Health'), ('Mental Wellbeing', 'Mental Wellbeing'), ('Emotional Balance', 'Emotional Balance'), ('Social Connections', 'Social Connections'), ('Overall Wellness', 'Overall Wellness')], max_length=50, null=True)),
                ('self_motivation', models.IntegerField(blank=True, null=True)),
                ('biggest_challenge', models.CharField(blank=True, choices=[('Time Management', 'Time Management'), ('Motivation', 'Motivation'), ('Stress Management', 'Stress Management'), ('Access to Resources', 'Access to Resources'), ('Support System', 'Support System')], max_length=50, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_assessment', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
